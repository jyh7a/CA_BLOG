{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Modal","props","title","titleNum","className","App","useState","titleUpdate","like","likeUpdate","modal","modalUpdate","titleNumUpdate","input","inputUpdate","style","color","fontSize","map","v","i","a","key","onClick","e","stopPropagation","arr","likeFunction","onChange","target","value","_title","_like","unshift","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAyFA,IAAMA,EAAQ,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,SACd,OACE,yBAAKC,UAAU,SACb,4BAAKF,EAAMC,IACX,2CACA,yDA+BSE,EAxHf,WAAe,MAYgBC,mBAAS,CAAC,wCAAW,wCAAW,mCAZhD,mBAYNJ,EAZM,KAYCK,EAZD,OAacD,mBAAS,CAAC,EAAG,EAAG,IAb9B,mBAaNE,EAbM,KAaAC,EAbA,OAcgBH,oBAAS,GAdzB,mBAcNI,EAdM,KAcCC,EAdD,OAecL,oBAAS,GAfvB,gCAiBsBA,mBAAS,IAjB/B,mBAiBNH,EAjBM,KAiBIS,EAjBJ,OAkBgBN,mBAAS,IAlBzB,mBAkBNO,EAlBM,KAkBCC,EAlBD,KAkDb,OACE,yBAAKV,UAAU,OAEb,yBAAKA,UAAU,aACb,yBAAKW,MAtCG,CAACC,MAAM,aAAcC,SAAS,KAsCtC,sBAMAf,EAAMgB,KAAK,SAACC,EAAGC,EAAGC,GAChB,OACE,yBAAKjB,UAAU,OAAOkB,IAAKF,GACzB,wBAAIG,QAAS,kBAAMX,EAAeQ,KAAKD,EAAvC,IAA0C,0BAAMI,QAAU,SAAAC,GAAC,OA9BlD,SAACA,EAAGJ,GACvBI,EAAEC,kBACF,IAAIC,EAAG,YAAOlB,GACdkB,EAAIN,IAAM,EACVX,EAAWiB,GA0B8DC,CAAaH,EAAGJ,KAArC,gBAA1C,IAA8FZ,EAAKY,IACnG,4DACA,iCAMR,yBAAKhB,UAAU,WACb,2BAAOwB,SAAU,SAACJ,GAAD,OAAKV,EAAYU,EAAEK,OAAOC,UAC3C,4BAAQP,QAlCW,WACvB,IAAIQ,EAAM,YAAO7B,GACb8B,EAAK,YAAOxB,GAEhBuB,EAAOE,QAAQpB,GACfmB,EAAMC,QAAQ,GAEd1B,EAAYwB,GACZtB,EAAWuB,KA0BP,iBAGF,4BAAQT,QAAS,WAAKZ,GAAaD,KAAnC,yCAEY,IAAVA,EAAiB,kBAAC,EAAD,CAAOR,MAAOA,EAAOC,SAAUA,IAAc,OCxElD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,YACvB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2042993.chunk.js","sourcesContent":["/* eslint-disable */\n\nimport React, {useState, useEffect, Profiler} from 'react';\nimport './App.css';\n\n\nfunction App() {\n  // for function\n  {/*\n    const repeatedUI = () => {\n      var arry = []\n      for(var i=0; i<3; i++){\n        arry.push(<div>안녕</div>)\n      }\n      return arry\n    }\n  */}\n\n  const [title, titleUpdate] = useState(['남자코트 추천', '강남 우동맛집', '파이썬독학'])\n  const [like, likeUpdate] = useState([0, 0, 0])\n  const [modal, modalUpdate] = useState(false)\n  const [sort, sortUpdate] = useState(true)\n  const style = {color:'dodgerblue', fontSize:30}\n  const [titleNum, titleNumUpdate] = useState(0)\n  const [input, inputUpdate] = useState('')\n\n  const sortFunction = () => {\n    if(sort){\n      let _title = [...title]\n      _title.sort()\n      titleUpdate(_title)\n      sortUpdate(false)\n    }else{\n      let _title = [...title]\n      _title.sort().reverse()\n      titleUpdate(_title)\n      sortUpdate(true)\n    }\n  }\n  const likeFunction = (e, i) => {\n    e.stopPropagation()\n    var arr = [...like]\n    arr[i] += 1\n    likeUpdate(arr)\n  }\n  const saveTitleFuntion = () => {\n    let _title = [...title]\n    let _like = [...like]\n\n    _title.unshift(input)\n    _like.unshift(0)\n\n    titleUpdate(_title)\n    likeUpdate(_like)\n  }\n\n  return (\n    <div className=\"App\">\n\n      <div className='black-nav'>\n        <div style={style}>개발 Blog</div>\n      </div>\n\n      {/* <button onClick={sortFunction}>정렬버튼</button> */}\n\n      {\n        title.map( (v, i, a) => {\n          return (\n            <div className='list' key={i}>\n              <h3 onClick={() => titleNumUpdate(i)}>{v} <span onClick={ e => likeFunction(e, i)}>👍</span> {like[i]}</h3>\n              <p>2월 17일 발행</p>\n              <hr/>\n            </div>\n          )\n        })\n      }\n\n      <div className=\"publish\">\n        <input onChange={(e)=>inputUpdate(e.target.value)}/>\n        <button onClick={saveTitleFuntion}>저장</button>\n      </div>\n\n      <button onClick={()=>{modalUpdate(!modal)}}>열고닫기버튼</button>\n\n      { modal === true ? <Modal title={title} titleNum={titleNum}/> : null }\n    </div>\n  );\n}\n\nconst Modal = (props) => {\n  const {title, titleNum} = props\n  return(\n    <div className='modal'>\n      <h2>{title[titleNum]}</h2>\n      <p>날짜</p>\n      <p>상세내용</p>\n    </div>\n  )\n}\n\n// class style\n{\n/*\nclass Profile extends React.Component{\n  constructor(){\n    super();\n    this.state = {name: 'Kim', age: 30}\n  }\n\n  changeName = () => {\n    this.setState({name: 'Park'})\n  }\n\n  render(){\n    return(\n      <div>\n        <h3>프로필입니다</h3>\n        <p>저는 {this.state.name}입니다</p>\n        <button onClick={this.changeName}>버튼</button>\n      </div>\n    )\n  }\n}\n*/\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}